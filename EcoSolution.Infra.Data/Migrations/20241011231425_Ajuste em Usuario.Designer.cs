// <auto-generated />
using System;
using EcoSolution.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EcoSolution.Infra.Data.Migrations
{
    [DbContext(typeof(EcoSolutionContext))]
    [Migration("20241011231425_Ajuste em Usuario")]
    partial class AjusteemUsuario
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EcoSolution.Domain.Entities.Base.Arquivo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Dados")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoArquivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Arquivo");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Base.ArquivoVinculado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArquivoId")
                        .HasColumnType("bigint");

                    b.Property<int>("Entidade")
                        .HasColumnType("integer");

                    b.Property<long>("EntidadeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EquipamentoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ManualId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TarefaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArquivoId");

                    b.HasIndex("EquipamentoId");

                    b.HasIndex("ManualId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TarefaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ArquivoVinculado");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Equipamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DadosColetados")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Manutencao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Equipamento");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Manual", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("EquipamentoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquipamentoId")
                        .IsUnique();

                    b.HasIndex("MaterialId")
                        .IsUnique();

                    b.ToTable("Manual");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Tarefa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("EquipamentoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ManualId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EquipamentoId");

                    b.HasIndex("ManualId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Tarefa");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("ChaveSecreta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Estacao")
                        .HasColumnType("bigint");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Base.ArquivoVinculado", b =>
                {
                    b.HasOne("EcoSolution.Domain.Entities.Base.Arquivo", "Arquivo")
                        .WithMany()
                        .HasForeignKey("ArquivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoSolution.Domain.Entities.Equipamento", null)
                        .WithMany("ArquivosVinculados")
                        .HasForeignKey("EquipamentoId");

                    b.HasOne("EcoSolution.Domain.Entities.Manual", null)
                        .WithMany("ArquivosVinculados")
                        .HasForeignKey("ManualId");

                    b.HasOne("EcoSolution.Domain.Entities.Material", null)
                        .WithMany("ArquivosVinculados")
                        .HasForeignKey("MaterialId");

                    b.HasOne("EcoSolution.Domain.Entities.Tarefa", null)
                        .WithMany("ArquivosVinculados")
                        .HasForeignKey("TarefaId");

                    b.HasOne("EcoSolution.Domain.Entities.Usuario", null)
                        .WithMany("ArquivosVinculados")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Arquivo");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Manual", b =>
                {
                    b.HasOne("EcoSolution.Domain.Entities.Equipamento", "Equipamento")
                        .WithOne("Manual")
                        .HasForeignKey("EcoSolution.Domain.Entities.Manual", "EquipamentoId");

                    b.HasOne("EcoSolution.Domain.Entities.Material", "Material")
                        .WithOne("Manual")
                        .HasForeignKey("EcoSolution.Domain.Entities.Manual", "MaterialId");

                    b.Navigation("Equipamento");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Tarefa", b =>
                {
                    b.HasOne("EcoSolution.Domain.Entities.Equipamento", "Equipamento")
                        .WithMany()
                        .HasForeignKey("EquipamentoId");

                    b.HasOne("EcoSolution.Domain.Entities.Manual", "Manual")
                        .WithMany()
                        .HasForeignKey("ManualId");

                    b.HasOne("EcoSolution.Domain.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("EcoSolution.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Tarefa")
                        .HasForeignKey("EcoSolution.Domain.Entities.Tarefa", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipamento");

                    b.Navigation("Manual");

                    b.Navigation("Material");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Equipamento", b =>
                {
                    b.Navigation("ArquivosVinculados");

                    b.Navigation("Manual")
                        .IsRequired();
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Manual", b =>
                {
                    b.Navigation("ArquivosVinculados");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Material", b =>
                {
                    b.Navigation("ArquivosVinculados");

                    b.Navigation("Manual")
                        .IsRequired();
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Tarefa", b =>
                {
                    b.Navigation("ArquivosVinculados");
                });

            modelBuilder.Entity("EcoSolution.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("ArquivosVinculados");

                    b.Navigation("Tarefa")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
